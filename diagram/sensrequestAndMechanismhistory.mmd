sequenceDiagram
    participant User
    participant RestClient as "RestClient.tsx"
    participant VariablesCtx as "VariablesContext"
    participant Utils as "utils.ts"
    participant LocalStorage as "localStorage"
    participant NextRouter as "Next.js Router (@/i18n/navigation)"
    participant RequestPage as "RequestPage.tsx (/client/...)"
    participant HistoryPage as "HistoryPage.tsx (/history)"
    participant TargetAPI as "Docelowe API"

    %% Flow: Wysyłanie nowego zapytania %%
    User->>+RestClient: Wpisuje URL, Body, Headers, wybiera Metodę
    User->>RestClient: Klika "Send"
    RestClient->>RestClient: Uruchamia handleSubmit()
    RestClient->>RestClient: Waliduje URL
    RestClient->>VariablesCtx: substituteVariables(url)
    VariablesCtx-->>RestClient: zwraca { result: substUrl, missingVariables: [] }
    RestClient->>VariablesCtx: substituteVariables(body)
    VariablesCtx-->>RestClient: zwraca { result: substBody, missingVariables: [] }
    RestClient->>VariablesCtx: substituteVariables(header.value) dla każdego nagłówka
    VariablesCtx-->>RestClient: zwraca { result: substHeaderValue, missingVariables: [] }
    RestClient->>RestClient: Sprawdza 'missingVariables'
    alt Jeśli są brakujące zmienne
        RestClient->>User: Pokazuje Toast z błędem
        RestClient-->>User: Przerywa
    else Jeśli nie ma brakujących zmiennych
        %% Zapisywanie do Historii (Krok dodany na podstawie wymagań) %%
        RestClient->>RestClient: Tworzy obiekt HistoryEntry (z substUrl, substBody, substHeaders)
        RestClient->>LocalStorage: Odczytuje istniejącą historię ('rest-client-history')
        LocalStorage-->>RestClient: Zwraca tablicę historii (lub null)
        RestClient->>RestClient: Dodaje nowy HistoryEntry do tablicy
        RestClient->>LocalStorage: Zapisuje zaktualizowaną historię ('rest-client-history')

        %% Budowanie URL stanu i Nawigacja %%
        RestClient->>Utils: buildRequestUrl(substUrl, method, substBody, substHeaders)
        Utils-->>RestClient: Zwraca statefulUrl (np. /pl/client/GET/base64url/base64body?headers=...)
        RestClient->>NextRouter: router.push(statefulUrl)
        NextRouter->>User: Zmienia adres URL w przeglądarce
    end
    RestClient-->>-User: (UI może pokazać stan ładowania)


    %% Flow: Ładowanie strony po nawigacji (z Send lub Historii) %%
    User->>+RequestPage: Przeglądarka ładuje stronę dla statefulUrl
    RequestPage->>RequestPage: Odczytuje parametry (method, path, searchParams) z URL
    RequestPage->>RequestPage: Dekoduje (Base64, decodeURIComponent) URL, Body, Headers
    alt Jeśli błąd dekodowania
        RequestPage->>User: Wyświetla błąd
    else Jeśli dekodowanie OK
        RequestPage->>RestClient: Renderuje RestClient z initialMethod, initialUrl, initialBody, initialHeaders
        RestClient->>RestClient: Uruchamia useEffect (zależny od initial* props lub pusty [])
        RestClient->>Utils: getFilteredHeaders(initialHeaders)
        Utils-->>RestClient: Zwraca sformatowane nagłówki
        RestClient->>+TargetAPI: Wykonuje fetch(initialUrl, { method: initialMethod, headers: ..., body: initialBody })
        TargetAPI-->>-RestClient: Zwraca Odpowiedź (Response)
        RestClient->>Utils: handleResponse(response)
        Utils-->>RestClient: Zwraca { data: responseData, detectedLanguage: lang }
        RestClient->>RestClient: Aktualizuje stan (responseData, responseStatus, language)
        RestClient->>User: Wyświetla Odpowiedź w UI
    end
    RequestPage-->>-User: (Strona załadowana)


    %% Flow: Przeglądanie Historii %%
    User->>+HistoryPage: Nawiguje do /history
    HistoryPage->>HistoryPage: Sprawdza AuthContext (user, loading)
    alt Jeśli użytkownik niezalogowany
        HistoryPage->>NextRouter: router.push('/signin')
    else Jeśli użytkownik zalogowany
        HistoryPage->>LocalStorage: Odczytuje 'rest-client-history'
        LocalStorage-->>HistoryPage: Zwraca tablicę historii (lub null)
        HistoryPage->>HistoryPage: Parsuje JSON, sortuje, aktualizuje stan 'history'
        HistoryPage->>HistoryPage: Renderuje listę wpisów
        loop Dla każdego wpisu w historii
            HistoryPage->>HistoryPage: Oblicza statefulUrl (koduje URL, Body, Headers)
            HistoryPage->>User: Wyświetla Link z obliczonym href=statefulUrl
        end
    end
    HistoryPage-->>-User: (Strona historii wyświetlona)


    %% Flow: Kliknięcie linku w Historii %%
    User->>HistoryPage: Klika Link dla konkretnego wpisu
    HistoryPage->>NextRouter: Nawiguje do statefulUrl z Linku
    NextRouter->>User: Zmienia adres URL w przeglądarce
    Note over User, TargetAPI: Przepływ kontynuuje od "Ładowanie strony po nawigacji"
